/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthenticatedRouteImport } from './routes/unauthenticated'
import { Route as TesteRouteImport } from './routes/teste'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProductRouteImport } from './routes/_product'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TesteUserIdRouteImport } from './routes/teste.$userId'
import { Route as ProductCategoryRouteImport } from './routes/_product.$category'
import { Route as AuthProfileRouteImport } from './routes/_auth.profile'
import { Route as AuthCartRouteImport } from './routes/_auth.cart'
import { Route as ProductCategoryProductIdRouteImport } from './routes/_product.$category.$productId'
import { Route as AuthUserUserIdRouteImport } from './routes/_auth.user.$userId'

const UnauthenticatedRoute = UnauthenticatedRouteImport.update({
  id: '/unauthenticated',
  path: '/unauthenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const TesteRoute = TesteRouteImport.update({
  id: '/teste',
  path: '/teste',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductRoute = ProductRouteImport.update({
  id: '/_product',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TesteUserIdRoute = TesteUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => TesteRoute,
} as any)
const ProductCategoryRoute = ProductCategoryRouteImport.update({
  id: '/$category',
  path: '/$category',
  getParentRoute: () => ProductRoute,
} as any)
const AuthProfileRoute = AuthProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any)
const AuthCartRoute = AuthCartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => AuthRoute,
} as any)
const ProductCategoryProductIdRoute =
  ProductCategoryProductIdRouteImport.update({
    id: '/$productId',
    path: '/$productId',
    getParentRoute: () => ProductCategoryRoute,
  } as any)
const AuthUserUserIdRoute = AuthUserUserIdRouteImport.update({
  id: '/user/$userId',
  path: '/user/$userId',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/teste': typeof TesteRouteWithChildren
  '/unauthenticated': typeof UnauthenticatedRoute
  '/cart': typeof AuthCartRoute
  '/profile': typeof AuthProfileRoute
  '/$category': typeof ProductCategoryRouteWithChildren
  '/teste/$userId': typeof TesteUserIdRoute
  '/user/$userId': typeof AuthUserUserIdRoute
  '/$category/$productId': typeof ProductCategoryProductIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/teste': typeof TesteRouteWithChildren
  '/unauthenticated': typeof UnauthenticatedRoute
  '/cart': typeof AuthCartRoute
  '/profile': typeof AuthProfileRoute
  '/$category': typeof ProductCategoryRouteWithChildren
  '/teste/$userId': typeof TesteUserIdRoute
  '/user/$userId': typeof AuthUserUserIdRoute
  '/$category/$productId': typeof ProductCategoryProductIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_product': typeof ProductRouteWithChildren
  '/login': typeof LoginRoute
  '/teste': typeof TesteRouteWithChildren
  '/unauthenticated': typeof UnauthenticatedRoute
  '/_auth/cart': typeof AuthCartRoute
  '/_auth/profile': typeof AuthProfileRoute
  '/_product/$category': typeof ProductCategoryRouteWithChildren
  '/teste/$userId': typeof TesteUserIdRoute
  '/_auth/user/$userId': typeof AuthUserUserIdRoute
  '/_product/$category/$productId': typeof ProductCategoryProductIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/teste'
    | '/unauthenticated'
    | '/cart'
    | '/profile'
    | '/$category'
    | '/teste/$userId'
    | '/user/$userId'
    | '/$category/$productId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/teste'
    | '/unauthenticated'
    | '/cart'
    | '/profile'
    | '/$category'
    | '/teste/$userId'
    | '/user/$userId'
    | '/$category/$productId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_product'
    | '/login'
    | '/teste'
    | '/unauthenticated'
    | '/_auth/cart'
    | '/_auth/profile'
    | '/_product/$category'
    | '/teste/$userId'
    | '/_auth/user/$userId'
    | '/_product/$category/$productId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  ProductRoute: typeof ProductRouteWithChildren
  LoginRoute: typeof LoginRoute
  TesteRoute: typeof TesteRouteWithChildren
  UnauthenticatedRoute: typeof UnauthenticatedRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthenticated': {
      id: '/unauthenticated'
      path: '/unauthenticated'
      fullPath: '/unauthenticated'
      preLoaderRoute: typeof UnauthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/teste': {
      id: '/teste'
      path: '/teste'
      fullPath: '/teste'
      preLoaderRoute: typeof TesteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_product': {
      id: '/_product'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProductRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/teste/$userId': {
      id: '/teste/$userId'
      path: '/$userId'
      fullPath: '/teste/$userId'
      preLoaderRoute: typeof TesteUserIdRouteImport
      parentRoute: typeof TesteRoute
    }
    '/_product/$category': {
      id: '/_product/$category'
      path: '/$category'
      fullPath: '/$category'
      preLoaderRoute: typeof ProductCategoryRouteImport
      parentRoute: typeof ProductRoute
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/cart': {
      id: '/_auth/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof AuthCartRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_product/$category/$productId': {
      id: '/_product/$category/$productId'
      path: '/$productId'
      fullPath: '/$category/$productId'
      preLoaderRoute: typeof ProductCategoryProductIdRouteImport
      parentRoute: typeof ProductCategoryRoute
    }
    '/_auth/user/$userId': {
      id: '/_auth/user/$userId'
      path: '/user/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof AuthUserUserIdRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthCartRoute: typeof AuthCartRoute
  AuthProfileRoute: typeof AuthProfileRoute
  AuthUserUserIdRoute: typeof AuthUserUserIdRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthCartRoute: AuthCartRoute,
  AuthProfileRoute: AuthProfileRoute,
  AuthUserUserIdRoute: AuthUserUserIdRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ProductCategoryRouteChildren {
  ProductCategoryProductIdRoute: typeof ProductCategoryProductIdRoute
}

const ProductCategoryRouteChildren: ProductCategoryRouteChildren = {
  ProductCategoryProductIdRoute: ProductCategoryProductIdRoute,
}

const ProductCategoryRouteWithChildren = ProductCategoryRoute._addFileChildren(
  ProductCategoryRouteChildren,
)

interface ProductRouteChildren {
  ProductCategoryRoute: typeof ProductCategoryRouteWithChildren
}

const ProductRouteChildren: ProductRouteChildren = {
  ProductCategoryRoute: ProductCategoryRouteWithChildren,
}

const ProductRouteWithChildren =
  ProductRoute._addFileChildren(ProductRouteChildren)

interface TesteRouteChildren {
  TesteUserIdRoute: typeof TesteUserIdRoute
}

const TesteRouteChildren: TesteRouteChildren = {
  TesteUserIdRoute: TesteUserIdRoute,
}

const TesteRouteWithChildren = TesteRoute._addFileChildren(TesteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  ProductRoute: ProductRouteWithChildren,
  LoginRoute: LoginRoute,
  TesteRoute: TesteRouteWithChildren,
  UnauthenticatedRoute: UnauthenticatedRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
