/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthenticatedRouteImport } from './routes/unauthenticated'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthProfileRouteImport } from './routes/_auth/profile'
import { Route as ProductsCategoryIndexRouteImport } from './routes/products/$category/index'
import { Route as ProductsCategoryIdRouteImport } from './routes/products/$category/$id'

const UnauthenticatedRoute = UnauthenticatedRouteImport.update({
  id: '/unauthenticated',
  path: '/unauthenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthProfileRoute = AuthProfileRouteImport.update({
  id: '/_auth/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsCategoryIndexRoute = ProductsCategoryIndexRouteImport.update({
  id: '/products/$category/',
  path: '/products/$category/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsCategoryIdRoute = ProductsCategoryIdRouteImport.update({
  id: '/products/$category/$id',
  path: '/products/$category/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/profile': typeof AuthProfileRoute
  '/products/$category/$id': typeof ProductsCategoryIdRoute
  '/products/$category': typeof ProductsCategoryIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/profile': typeof AuthProfileRoute
  '/products/$category/$id': typeof ProductsCategoryIdRoute
  '/products/$category': typeof ProductsCategoryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/_auth/profile': typeof AuthProfileRoute
  '/products/$category/$id': typeof ProductsCategoryIdRoute
  '/products/$category/': typeof ProductsCategoryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/unauthenticated'
    | '/profile'
    | '/products/$category/$id'
    | '/products/$category'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/unauthenticated'
    | '/profile'
    | '/products/$category/$id'
    | '/products/$category'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/unauthenticated'
    | '/_auth/profile'
    | '/products/$category/$id'
    | '/products/$category/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  UnauthenticatedRoute: typeof UnauthenticatedRoute
  AuthProfileRoute: typeof AuthProfileRoute
  ProductsCategoryIdRoute: typeof ProductsCategoryIdRoute
  ProductsCategoryIndexRoute: typeof ProductsCategoryIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthenticated': {
      id: '/unauthenticated'
      path: '/unauthenticated'
      fullPath: '/unauthenticated'
      preLoaderRoute: typeof UnauthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$category/': {
      id: '/products/$category/'
      path: '/products/$category'
      fullPath: '/products/$category'
      preLoaderRoute: typeof ProductsCategoryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$category/$id': {
      id: '/products/$category/$id'
      path: '/products/$category/$id'
      fullPath: '/products/$category/$id'
      preLoaderRoute: typeof ProductsCategoryIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  UnauthenticatedRoute: UnauthenticatedRoute,
  AuthProfileRoute: AuthProfileRoute,
  ProductsCategoryIdRoute: ProductsCategoryIdRoute,
  ProductsCategoryIndexRoute: ProductsCategoryIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
