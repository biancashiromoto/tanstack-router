/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthenticatedRouteImport } from './routes/unauthenticated'
import { Route as ProductRouteImport } from './routes/_product'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductCategoryRouteImport } from './routes/_product.$category'
import { Route as AuthProfileRouteImport } from './routes/_auth.profile'
import { Route as AuthCartRouteImport } from './routes/_auth.cart'
import { Route as ProductCategoryIdRouteImport } from './routes/_product.$category.$id'

const UnauthenticatedRoute = UnauthenticatedRouteImport.update({
  id: '/unauthenticated',
  path: '/unauthenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductRoute = ProductRouteImport.update({
  id: '/_product',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductCategoryRoute = ProductCategoryRouteImport.update({
  id: '/$category',
  path: '/$category',
  getParentRoute: () => ProductRoute,
} as any)
const AuthProfileRoute = AuthProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any)
const AuthCartRoute = AuthCartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => AuthRoute,
} as any)
const ProductCategoryIdRoute = ProductCategoryIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ProductCategoryRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/cart': typeof AuthCartRoute
  '/profile': typeof AuthProfileRoute
  '/$category': typeof ProductCategoryRouteWithChildren
  '/$category/$id': typeof ProductCategoryIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/cart': typeof AuthCartRoute
  '/profile': typeof AuthProfileRoute
  '/$category': typeof ProductCategoryRouteWithChildren
  '/$category/$id': typeof ProductCategoryIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_product': typeof ProductRouteWithChildren
  '/unauthenticated': typeof UnauthenticatedRoute
  '/_auth/cart': typeof AuthCartRoute
  '/_auth/profile': typeof AuthProfileRoute
  '/_product/$category': typeof ProductCategoryRouteWithChildren
  '/_product/$category/$id': typeof ProductCategoryIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/unauthenticated'
    | '/cart'
    | '/profile'
    | '/$category'
    | '/$category/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/unauthenticated'
    | '/cart'
    | '/profile'
    | '/$category'
    | '/$category/$id'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_product'
    | '/unauthenticated'
    | '/_auth/cart'
    | '/_auth/profile'
    | '/_product/$category'
    | '/_product/$category/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  ProductRoute: typeof ProductRouteWithChildren
  UnauthenticatedRoute: typeof UnauthenticatedRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthenticated': {
      id: '/unauthenticated'
      path: '/unauthenticated'
      fullPath: '/unauthenticated'
      preLoaderRoute: typeof UnauthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_product': {
      id: '/_product'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProductRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_product/$category': {
      id: '/_product/$category'
      path: '/$category'
      fullPath: '/$category'
      preLoaderRoute: typeof ProductCategoryRouteImport
      parentRoute: typeof ProductRoute
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/cart': {
      id: '/_auth/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof AuthCartRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_product/$category/$id': {
      id: '/_product/$category/$id'
      path: '/$id'
      fullPath: '/$category/$id'
      preLoaderRoute: typeof ProductCategoryIdRouteImport
      parentRoute: typeof ProductCategoryRoute
    }
  }
}

interface AuthRouteChildren {
  AuthCartRoute: typeof AuthCartRoute
  AuthProfileRoute: typeof AuthProfileRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthCartRoute: AuthCartRoute,
  AuthProfileRoute: AuthProfileRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ProductCategoryRouteChildren {
  ProductCategoryIdRoute: typeof ProductCategoryIdRoute
}

const ProductCategoryRouteChildren: ProductCategoryRouteChildren = {
  ProductCategoryIdRoute: ProductCategoryIdRoute,
}

const ProductCategoryRouteWithChildren = ProductCategoryRoute._addFileChildren(
  ProductCategoryRouteChildren,
)

interface ProductRouteChildren {
  ProductCategoryRoute: typeof ProductCategoryRouteWithChildren
}

const ProductRouteChildren: ProductRouteChildren = {
  ProductCategoryRoute: ProductCategoryRouteWithChildren,
}

const ProductRouteWithChildren =
  ProductRoute._addFileChildren(ProductRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  ProductRoute: ProductRouteWithChildren,
  UnauthenticatedRoute: UnauthenticatedRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
